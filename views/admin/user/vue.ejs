let userAppModel = {
  data: {
    item: {
      username: '',
      email: '',
      firstName: '',
      lastName: '',
      password: '',
      Passports: [
        {
          password: ""
        }
      ]
    },
    items: [],
    option: {
      passwordConfirm: ''
    }
  },
  view: {
    table: {
      selectIndex: -1
    },
  }
}

let userApp = new Vue({
  data: userAppModel,
  methods: {
    cancel: function (event) {
      location.href = `/admin/#/admin/user`
    },
    save: function (event) {
      fetch('/user', {
        credentials: 'include',
        method: 'post',
        body: JSON.stringify(userAppModel.data.item)
      })
      .then(response => response.json())
      .then(result => {
        if (result.success) {
          location.href = `/admin/#/admin/user`;
          messageApp.show({desc: `新增會員成功！`, type: 'success'});
        }
      });
    },
    update: function (event) {

      let body = userAppModel.data.item;
      fetch(`/user/${userAppModel.data.item.id}`, {
        credentials: 'include',
        method: 'post',
        body: JSON.stringify(body)
      })
      .then(response => response.json())
      .then(result => {
        if (result.success) {
          location.href = `/admin/#/admin/user`;
          messageApp.show({desc: `更新會員資料成功！`, type: 'success'});
        }
      });
    },
    loadItem: function (event) {
      fetch(`/user/${userAppModel.data.item.id}`, {credentials: 'include'})
      .then(response => response.json())
      .then(result => {


        if (result.success) {
          userAppModel.data.item.username = result.data.username
          userAppModel.data.item.email = result.data.email
          userAppModel.data.item.firstName = result.data.firstName
          userAppModel.data.item.lastName = result.data.lastName
          userAppModel.data.item.Passports[0].password = result.data.Passports[0].password
          userAppModel.data.option.passwordConfirm = result.data.Passports[0].password
        }
      });
    },
    setupForm: (type) => {
      var registerForm = $("#user-form");
      registerForm.validate({

        // Rules for form validation
        rules : {
          username : {
            required : true
          },
          email : {
            required : true,
            email : true
          },
          firstname : {
            required : true
          },
          lastname : {
            required : true
          },
          password : {
            required : true,
            minlength : 3,
          },
          passwordConfirm : {
            required : true,
            minlength : 3,
            equalTo : '#password'
          },
        },

        // Messages for form validation
        messages : {
          login : {
            required : 'Please enter your login'
          },
          email : {
            required : 'Please enter your email address',
            email : 'Please enter a VALID email address'
          },
          firstname : {
            required : 'Please select your first name'
          },
          lastname : {
            required : 'Please select your last name'
          },
          password : {
            required : 'Please enter your password'
          },
          passwordConfirm : {
            required : 'Please enter your password one more time',
            equalTo : 'Please enter the same password as above'
          },
        },

        // Do not change code below
        errorPlacement : function(error, element) {
          error.insertAfter(element.parent());
        },

        submitHandler: function(form) {
          if (type == 'create') {
            userApp.save();
            return false;
          } else if(type == 'edit') {
            userApp.update();
            return false;
          }
        }
      });
    },
    loadItems: function (event) {
      return fetch('/user', {credentials: 'include'})
      .then(response => response.json())
      .then(result => {
        userAppModel.data.items = result.data.items
      })
    },
    renderTable: () => {
      /* BASIC ;*/
     var responsiveHelper_user_table = undefined;
     var responsiveHelper_datatable_fixed_column = undefined;
     var responsiveHelper_datatable_col_reorder = undefined;
     var responsiveHelper_datatable_tabletools = undefined;

     var breakpointDefinition = {
       tablet : 1024,
       phone : 480
     };
     /* TABLETOOLS */
     let table = $('#user-table').dataTable({

       // Tabletools options:
       //   https://datatables.net/extensions/tabletools/button_options
       "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'Tl>r>"+
           "t"+
           "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
       "oLanguage": {
         "sSearch": '<span class="input-group-addon"><i class="glyphicon glyphicon-search"></i></span>'
       },
       "oTableTools": {
         "aButtons": [
           {
             "sExtends": "text",
             "sButtonText": "新增",
             "fnClick": function ( nButton, oConfig, oFlash ) {
               location.href = `/admin/#/admin/user/create`
             }
           },
          //  {
          //    "sExtends": "text",
          //    "sButtonText": "編輯",
          //    "fnClick": function ( nButton, oConfig, oFlash ) {
          //      if (userAppModel.view.table.selectIndex !== -1) {
          //        let index = userAppModel.view.table.selectIndex;
          //        let userId = userAppModel.data.items[index].id;
          //        location.href = `/admin/#/admin/user/edit/${userId}`
          //      } else {
          //        messageApp.show({desc: `請選擇會員`, type: 'warning'});
          //      }
          //    }
          //  },
         ]
       },
       "autoWidth" : true,
       "preDrawCallback" : function() {
         // Initialize the responsive datatables helper once.
         if (!responsiveHelper_datatable_tabletools) {
           responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#user-table'), breakpointDefinition);
         }
       },
       "rowCallback" : function(nRow) {
         responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
       },
       "drawCallback" : function(oSettings) {
         responsiveHelper_datatable_tabletools.respond();
       }
     });

     // selection
     table.on( 'click', 'tr', function () {
       if ( $(this).hasClass('selected') ) {
         $(this).removeClass('selected');
       }
       else {
         $('#user-table tbody tr').removeClass('selected');
         $(this).addClass('selected');
       }
     });

    },
    selection:  function (index) {
      if (index !== userAppModel.view.table.selectIndex) {
        userAppModel.view.table.selectIndex = index;
        console.log("userAppModel.view.table.selectIndex", userAppModel.view.table.selectIndex);
      } else {
        userAppModel.view.table.selectIndex = -1
      }
    },
    edit: function (userId) {
      location.href = `/admin/#/admin/user/edit/${userId}`;
    },
    delete: function() {
      messageApp.confirm({
        title: '刪除',
        content: '確認刪除該使用者？',
        btnArray: ['刪除', '取消'],
      },
      function(ButtonPressed) {
        if (ButtonPressed ==='刪除') {
          const index = userAppModel.data.item.id;
          fetch(`/user/${userAppModel.data.item.id}`, {
             credentials: 'include',
             method: 'DELETE',
          })
          .then(response => response.json())
          .then(result => {
            if (result.success) {
              location.href = `/admin/#/admin/user`
              userAppModel.view.table.selectIndex = -1;
              messageApp.show({desc: `刪除會員成功！`, type: 'success'});
            } else {
              messageApp.show({desc: `刪除會員失敗！errorMessage:${result.message}`, type: 'error'});
            }
          });
        }
      });
    }
  },
});
